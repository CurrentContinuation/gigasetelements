package com.cc.gigaset.test;

import java.io.File;
import java.io.FileInputStream;
import java.net.URI;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import javax.ws.rs.RedirectionException;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.Form;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.NewCookie;
import javax.ws.rs.core.Response;

import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.cc.gigaset.GigasetElements;
import com.cc.gigaset.GigasetElementsService;
import com.cc.gigaset.common.Base;
import com.cc.gigaset.common.JsonToMapImpl;
import com.cc.gigaset.common.MapVisitor;
import com.cc.gigaset.common.Mode;

public class GigasetElementsTest
	extends JsonToMapImpl {

    private static final String EC1 = "--------------------------------------------------------------------------------------------------------------------------------";
    private static final String EC2 = EC1.replace("-", "#");
    // url01
    private static final String url01 = "https://im.gigaset-elements.de";
    private static final String urlIdentity = "identity/api/v1/user/login";
    // url02
    private static final String url02 = "https://api.gigaset-elements.de";
    private static final String urlAuth = "api/v1/auth/openid/begin";// +?op=gigaset
    private static final String urlAuth2 = "api/v1/auth/openid/checkauth";// +?gigaset.op=gigaset
    private static final String urlBase = "api/v1/me/basestations";
    private static final String urlEvents = "api/v1/me/events";// ?limit=1
    // redirect
    @SuppressWarnings("unused")
    private static final String urlCamera = "api/v1/me/cameras";
    // username & password
    private static String username = "your.email@somewhere.com";
    private static String password = "thisismysecretpassword";

    @Before
    public void loadCredentials() throws Exception {
	Properties props = new Properties();
	File file = new File("gigasetelements.properties");
	Assert.assertTrue(file.exists());
	props.load(new FileInputStream(file));
	username = props.getProperty("username");
	password = props.getProperty("password");
    }

    @Test
    public void test() throws Exception {
	GigasetElements service = new GigasetElementsService(username, password);
	Base base = service.setEventsCount(100).getBase();
	Mode mode = base.getMode();
	service.setMode(base, Mode.CUSTOM);
	service.setMode(base, mode);
    }

    @Test
    public void testGigaset() throws Exception {
	// Client client = ClientBuilder.newClient();
	Client client = new ResteasyClientBuilder().establishConnectionTimeout(100, TimeUnit.SECONDS).socketTimeout(10, TimeUnit.SECONDS).build();
	try {
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // MapVisitor
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    MapVisitor visitor = new MapVisitor() {

		@Override
		public int getMaxLevel() {
		    return Integer.MAX_VALUE;
		}

		@SuppressWarnings("unused")
		public void onKeyValue(int level, String key, Object value) {
		    String space = " ";
		    for (int i = 0; i < level; i++) {
			space = space + "   ";
		    }
		    System.out.println(level + space + key + " = " + value);
		}
	    };
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // urlIdentity
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget tIdentity = client.target(url01).path(urlIdentity);
	    // tIdentity.property(ClientProperties.FOLLOW_REDIRECTS, true);
	    Form form = new Form();
	    form.param("email", username);
	    form.param("password", password);
	    Response responseIdentity = tIdentity.request(MediaType.APPLICATION_JSON_TYPE).post(Entity.entity(form, MediaType.APPLICATION_FORM_URLENCODED_TYPE));
	    report(responseIdentity);
	    Assert.assertEquals(200, responseIdentity.getStatus());
	    String entityIdentity = responseIdentity.readEntity(String.class);
	    Map<String, Object> mapIdentity = jsonToMap(entityIdentity);
	    System.out.println("--> " + mapIdentity);
	    System.out.println(EC2 + EC2 + EC2);
	    visit(mapIdentity, visitor);
	    Cookie identityCookie = getCookie(responseIdentity);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // urlAuth
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // url_identity = 'https://im.gigaset-elements.de/identity/api/v1/user/login'
	    // url_auth = 'https://api.gigaset-elements.de/api/v1/auth/openid/begin?op=gigaset'
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // payload = {'password': args.password, 'email': args.username}
	    // commit_data = restpost(url_identity, payload)
	    // log(commit_data['message'])
	    // s.headers['Connection'] = 'close'
	    // auth_data = restget(url_auth)
	    // s.headers['Connection'] = 'keep-alive'
	    // log(auth_data)
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // https://im.gigaset-elements.de/identity/api/v1/openid/provider/
	    // ?openid.return_to = https://api.gigaset-elements.de/api/v1/auth/openid/checkauth?gigaset.op=gigaset
	    // &openid.ax.mode=fetch_request
	    // &openid.claimed_id=http://specs.openid.net/auth/2.0/identifier_select
	    // &openid.ax.type.email=http://schema.openid.net/contact/email
	    // &openid.mode=checkid_setup
	    // &openid.ns.ax=http://openid.net/srv/ax/1.0
	    // &openid.ns=http://specs.openid.net/auth/2.0
	    // &openid.realm=https://api.gigaset-elements.de/
	    // &openid.identity=http://specs.openid.net/auth/2.0/identifier_select
	    // &openid.ax.required=email,language
	    // &openid.ax.type.language=http://axschema.org/pref/language
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetAuth = client.target(url02).path(urlAuth).queryParam("op", "gigaset");
	    for (String key : targetAuth.getConfiguration().getPropertyNames()) {
		System.out.println(key + " = " + targetAuth.getConfiguration().getProperty(key));
	    }
	    // WebTarget targetAuth = client.target(url02).path(urlAuth2).queryParam("gigaset.op", "gigaset");
	    // ----------------------------------------------------------------------------------------
	    Response responseAuth = null;
	    try {
		Builder request = targetAuth.request(MediaType.TEXT_PLAIN_TYPE);
		// request.header("Connection", "close");
		// request.header("Authorization", "OpenId " + identityCookie.getValue());
		// request.formParameter(OAuth.OAUTH_CONSUMER_KEY, consumerKey);
		// request.formParameter("xoauth_scope", scope);
		// request.formParameter("xoauth_permission", "sendMessages");
		request.cookie(identityCookie);
		responseAuth = request.get();
		report(responseAuth);
		if (responseAuth.getStatus() == 302) {
		    @SuppressWarnings("unused")
		    URI location = responseAuth.getLocation();
		    // ???
		}
	    } catch (RedirectionException redirect) {
		URI location = redirect.getLocation();
		targetAuth = client.target(location).queryParam("op", "gigaset");
		report(responseAuth);
		responseAuth = targetAuth.request(MediaType.TEXT_PLAIN_TYPE).cookie(identityCookie).get();
	    }
	    Assert.assertEquals(200, responseAuth.getStatus());
	    String entityAuth = responseAuth.readEntity(String.class);
	    System.out.println("--> " + entityAuth);// not JSON!
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // authorization
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    Cookie authorizationCookie = getCookie(responseAuth);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // urlBase
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetBase = client.target(url02).path(urlBase);
	    Response responseBase = targetBase.request(MediaType.APPLICATION_JSON_TYPE).cookie(authorizationCookie).get();
	    report(responseBase);
	    Assert.assertEquals(200, responseBase.getStatus());
	    String entityBase = responseBase.readEntity(String.class);
	    Map<String, Object> mapBase = jsonToMap(entityBase);
	    System.out.println("--> " + mapBase);
	    System.out.println(EC2 + EC2 + EC2);
	    visit(mapBase, visitor);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // urlEvents
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetEvents = client.target(url02).path(urlEvents).queryParam("limit", "20");
	    Response responseEvents = targetEvents.request(MediaType.APPLICATION_JSON_TYPE).cookie(authorizationCookie).get();
	    report(responseEvents);
	    Assert.assertEquals(200, responseEvents.getStatus());
	    String entityEvents = responseEvents.readEntity(String.class);
	    Map<String, Object> mapEvents = jsonToMap(entityEvents);
	    System.out.println("--> " + mapEvents);
	    System.out.println(EC2 + EC2 + EC2);
	    visit(mapEvents, visitor);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // Change Status!
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	} finally {
	    client.close();
	}
    }

    private Cookie getCookie(Response response) {
	for (String key : response.getCookies().keySet()) {
	    return response.getCookies().get(key);
	}
	return null;
    }

    private void report(Response response) {
	System.out.println();
	System.out.println(EC2 + EC2 + EC2);
	System.out.println(response.getStatus() + ": " + response);
	System.out.println(EC2 + EC2 + EC2);
	System.out.println("MediaType: " + response.getMediaType());
	System.out.println(EC1 + EC1 + EC1);
	if (!response.getHeaders().isEmpty()) {
	    for (String key : response.getHeaders().keySet()) {
		System.out.println(key + " " + response.getHeaders().get(key));
	    }
	} else {
	    System.out.println("no Headers");
	}
	System.out.println(EC1 + EC1 + EC1);
	if (!response.getCookies().isEmpty()) {
	    for (String key : response.getCookies().keySet()) {
		NewCookie cookie = response.getCookies().get(key);
		System.out.println(key + " " + cookie);
	    }
	} else {
	    System.out.println("no Cookies");
	}
	System.out.println(EC1 + EC1 + EC1);
	if (!response.getAllowedMethods().isEmpty()) {
	    for (String key : response.getAllowedMethods()) {
		System.out.println(key);
	    }
	} else {
	    System.out.println("no AllowedMethods");
	}
	System.out.println();
    }
}
