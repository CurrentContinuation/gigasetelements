package com.cc.gigaset.test;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import javax.ws.rs.client.Entity;
import javax.ws.rs.client.Invocation.Builder;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.Cookie;
import javax.ws.rs.core.Form;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.NewCookie;
import javax.ws.rs.core.Response;

import org.apache.http.HttpException;
import org.apache.http.HttpRequest;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.impl.client.AbstractHttpClient;
import org.apache.http.impl.client.DefaultRedirectStrategy;
import org.apache.http.protocol.HttpContext;
import org.jboss.resteasy.client.jaxrs.ResteasyClient;
import org.jboss.resteasy.client.jaxrs.ResteasyClientBuilder;
import org.jboss.resteasy.client.jaxrs.engines.ApacheHttpClient4Engine;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.cc.gigaset.AllowRedirectHttpParams;
import com.cc.gigaset.Base;
import com.cc.gigaset.GigasetElements;
import com.cc.gigaset.GigasetElementsService;
import com.cc.gigaset.JsonToMapImpl;
import com.cc.gigaset.MapVisitor;
import com.cc.gigaset.Mode;

public class GigasetElementsTest
	extends JsonToMapImpl {

    private static final String EC1 = "--------------------------------------------------------------------------------------------------------------------------------";
    private static final String EC2 = EC1.replace("-", "#");
    // url01
    private static final String urlimgede = "https://im.gigaset-elements.de";
    private static final String pathUserLogin = "identity/api/v1/user/login";
    // private static final String pathUserInfo = "identity/api/v1/user/info";
    // url02
    private static final String urlapigede = "https://api.gigaset-elements.de";
    private static final String pathAuth = "api/v1/auth/openid/begin";// +?op=gigaset
    // private static final String pathAuth2 = "api/v1/auth/openid/checkauth";// +?gigaset.op=gigaset
    private static final String pathBase = "api/v1/me/basestations";
    private static final String pathEvents = "api/v1/me/events";// ?limit=1
    // redirect
    @SuppressWarnings("unused")
    private static final String urlCamera = "api/v1/me/cameras";
    // username & password
    private static String username = "your.email@somewhere.com";
    private static String password = "thisismysecretpassword";

    @Before
    public void loadCredentials() throws Exception {
	Properties props = new Properties();
	File file = new File("gigasetelements.properties");
	Assert.assertTrue(file.exists());
	props.load(new FileInputStream(file));
	username = props.getProperty("username");
	password = props.getProperty("password");
    }

    @Test
    public void test() throws Exception {
	GigasetElements service = new GigasetElementsService(username, password);
	Base base = service.setEventsCount(100).getBase();
	Mode mode = base.getMode();
	service.setMode(base, Mode.CUSTOM);
	service.setMode(base, mode);
    }

    @Test
    public void testGigaset() throws Exception {
	// Client client = ClientBuilder.newClient();
	ResteasyClientBuilder resteasyClientBuilder = new ResteasyClientBuilder();
	ResteasyClient client = resteasyClientBuilder.establishConnectionTimeout(100, TimeUnit.SECONDS).socketTimeout(10, TimeUnit.SECONDS).build();
	// ################################################################################################################################################
	AbstractHttpClient httpClient = (AbstractHttpClient) ((ApacheHttpClient4Engine) client.httpEngine()).getHttpClient();
	httpClient.setRedirectStrategy(new DefaultRedirectStrategy() {

	    @Override
	    protected boolean isRedirectable(String method) {
		return true;
	    }
	});
	httpClient.addRequestInterceptor(new HttpRequestInterceptor() {

	    @Override
	    public void process(HttpRequest request, HttpContext context) throws HttpException, IOException {
		request.setParams(new AllowRedirectHttpParams(request.getParams()));
	    }
	});
	// ################################################################################################################################################
	try {
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // MapVisitor
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    MapVisitor visitor = new MapVisitor() {

		@Override
		public int getMaxLevel() {
		    return Integer.MAX_VALUE;
		}

		@SuppressWarnings("unused")
		public void onKeyValue(int level, String key, Object value) {
		    String space = " ";
		    for (int i = 0; i < level; i++) {
			space = space + "   ";
		    }
		    System.out.println(level + space + key + " = " + value);
		}
	    };
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // pathUserLogin
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetLogin = client.target(urlimgede).path(pathUserLogin);
	    Form form = new Form();
	    form.param("password", password);
	    form.param("email", username);
	    Response responseLogin = targetLogin.request(MediaType.APPLICATION_JSON_TYPE).post(Entity.entity(form, MediaType.APPLICATION_FORM_URLENCODED_TYPE));
	    report(responseLogin);
	    Assert.assertEquals(200, responseLogin.getStatus());
	    String entityLogin = responseLogin.readEntity(String.class);
	    Map<String, Object> mapLogin = jsonToMap(entityLogin);
	    System.out.println("--> " + mapLogin);
	    System.out.println(EC2 + EC2 + EC2);
	    visit(mapLogin, visitor);
	    Cookie identityCookie = getCookie(responseLogin);
	    responseLogin.close();
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // pathUserInfo (?)
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // WebTarget targetInfo = client.target(urlimgede).path(pathUserInfo);
	    // Response responseInfo = targetInfo.request(MediaType.APPLICATION_JSON_TYPE).cookie(getCookie(responseLogin)).get();
	    // report(responseInfo);
	    // Assert.assertEquals(200, responseInfo.getStatus());
	    // responseInfo.close();
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // pathAuth
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // url_identity = 'https://im.gigaset-elements.de/identity/api/v1/user/login'
	    // url_auth = 'https://api.gigaset-elements.de/api/v1/auth/openid/begin?op=gigaset'
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // payload = {'password': args.password, 'email': args.username}
	    // commit_data = restpost(url_identity, payload)
	    // log(commit_data['message'])
	    // s.headers['Connection'] = 'close'
	    // auth_data = restget(url_auth)
	    // s.headers['Connection'] = 'keep-alive'
	    // log(auth_data)
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    //@formatter:off
            //	    https://im.gigaset-elements.de/identity/api/v1/openid/provider/
            //		?openid.return_to=
            //			https://api.gigaset-elements.de/api/v1/auth/openid/checkauth?gigaset.op=gigaset
            //				&openid.ax.mode          = fetch_request
            //				&openid.claimed_id       = http://specs.openid.net/auth/2.0/identifier_select
            //				&openid.ax.type.email    = http://schema.openid.net/contact/email
            //				&openid.mode             = checkid_setup
            //				&openid.ns.ax            = http://openid.net/srv/ax/1.0
            //				&openid.ns               = http://specs.openid.net/auth/2.0
            //				&openid.realm            = https://api.gigaset-elements.de/
            //				&openid.identity         = http://specs.openid.net/auth/2.0/identifier_select
            //				&openid.ax.required      = email,language
            //				&openid.ax.type.language = http://axschema.org/pref/language
	    //@formatter:on
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetAuth = client.target(urlapigede).path(pathAuth).queryParam("op", "gigaset");
	    // ----------------------------------------------------------------------------------------------------------
	    // WebTarget targetAuth = client.target(urlapigede).path(pathAuth2);
	    // targetAuth.queryParam("gigaset.op", "gigaset");
	    // targetAuth.queryParam("openid.ax.mode", "fetch_request");
	    // targetAuth.queryParam("openid.mode", "checkid_setup");
	    // targetAuth.queryParam("openid.ax.required", username + ",it");
	    // targetAuth.queryParam("openid.identity", identityCookie.getValue());
	    // targetAuth.queryParam("openid.claimed_id", identityCookie.getValue());
	    // ----------------------------------------------------------------------------------------------------------
	    Builder request = targetAuth.request(MediaType.TEXT_HTML_TYPE);
	    request.cookie(identityCookie);
	    Response responseAuth = request.get();
	    report(responseAuth);
	    Assert.assertEquals(200, responseAuth.getStatus());
	    String entityAuth = responseAuth.readEntity(String.class);
	    System.out.println("--> " + entityAuth);// not JSON!
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // authorization
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    Cookie authorizationCookie = getCookie(responseAuth);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // pathBase
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetBase = client.target(urlapigede).path(pathBase);
	    Response responseBase = targetBase.request(MediaType.APPLICATION_JSON_TYPE).cookie(authorizationCookie).get();
	    report(responseBase);
	    Assert.assertEquals(200, responseBase.getStatus());
	    String entityBase = responseBase.readEntity(String.class);
	    Map<String, Object> mapBase = jsonToMap(entityBase);
	    System.out.println("--> " + mapBase);
	    System.out.println(EC2 + EC2 + EC2);
	    visit(mapBase, visitor);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // pathEvents
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    WebTarget targetEvents = client.target(urlapigede).path(pathEvents).queryParam("limit", "20");
	    Response responseEvents = targetEvents.request(MediaType.APPLICATION_JSON_TYPE).cookie(authorizationCookie).get();
	    report(responseEvents);
	    Assert.assertEquals(200, responseEvents.getStatus());
	    String entityEvents = responseEvents.readEntity(String.class);
	    Map<String, Object> mapEvents = jsonToMap(entityEvents);
	    System.out.println("--> " + mapEvents);
	    System.out.println(EC2 + EC2 + EC2);
	    visit(mapEvents, visitor);
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	    // Change Status!
	    // ------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	} finally {
	    client.close();
	}
    }

    private Cookie getCookie(Response response) {
	for (String key : response.getCookies().keySet()) {
	    return response.getCookies().get(key);
	}
	return null;
    }

    private void report(Response response) {
	System.out.println();
	System.out.println(EC2 + EC2 + EC2);
	System.out.println(response.getStatus() + " (" + response.getStatusInfo() + ")" + ": " + response);
	System.out.println(EC2 + EC2 + EC2);
	System.out.println("MediaType: " + response.getMediaType());
	System.out.println(EC1 + EC1 + EC1);
	if (!response.getHeaders().isEmpty()) {
	    for (String key : response.getHeaders().keySet()) {
		System.out.println(key + " " + response.getHeaders().get(key));
	    }
	} else {
	    System.out.println("no Headers");
	}
	System.out.println(EC1 + EC1 + EC1);
	if (!response.getCookies().isEmpty()) {
	    for (String key : response.getCookies().keySet()) {
		NewCookie cookie = response.getCookies().get(key);
		System.out.println(key + " " + cookie);
	    }
	} else {
	    System.out.println("no Cookies");
	}
	System.out.println(EC1 + EC1 + EC1);
	if (!response.getAllowedMethods().isEmpty()) {
	    for (String key : response.getAllowedMethods()) {
		System.out.println(key);
	    }
	} else {
	    System.out.println("no AllowedMethods");
	}
	System.out.println();
    }
}
